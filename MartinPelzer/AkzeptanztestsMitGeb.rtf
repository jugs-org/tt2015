{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa240
\cf0 \expnd0\expndtw0\kerning0
= Einfache automatisierte Akzeptanztests f\'fcr Web-Anwendungen nach dem KISS-Prinzip mit Geb =\
Testautomatisierung ist in agilen Projekten aufgrund der kurzen Release-Zyklen unabdingbar. Dabei kommen f\'fcr die verschiedenen Stufen der Testpyramide verschiedene Tools zum Einsatz. F\'fcr den obersten Teil der Pyramide \'96 die Akzeptanztests \'96 existieren verschiedene Tools, die oft den Ansatz verfolgen, die Testf\'e4lle in nat\'fcrlicher Sprache zu formulieren. Dies macht eine \'96 manuelle oder automatische - Umsetzung der Testf\'e4lle in Quellcode erforderlich. Beispiele f\'fcr solche Tools sind z.B. Cucumber oder Fitnesse.\uc0\u8232 In crossfunktionalen Teams besteht die harte Trennung zwischen Entwicklern und Testern nicht mehr, so dass diese Trennung als Grund f\'fcr nat\'fcrlichsprachliche Formulierung von Testf\'e4llen entf\'e4llt. Einzig der Product Owner ist in der Regel auf eine menschenverst\'e4ndliche Testfallrepr\'e4sentation angewiesen. Allerdings erstellt er die Testf\'e4lle nicht, sonder gibt lediglich die Akzeptanzkriterien vor.\u8232 Es stellt sich daher die Frage, ob die Komplexit\'e4t der Umsetzung der nat\'fcrlichsprachlich formulierten Testf\'e4lle in ausf\'fchrbaren Quellcode immer notwendig ist. Das crossfunktiona\'f6e Team k\'f6nnte seine Testf\'e4lle direkt in leicht verst\'e4ndlichem Quellcode formulieren. Ein Tool, das bei diesem anderen Ansatz gut helfen kann, ist Geb. In einer einfach schreib- und lesbaren Groovy-Syntax werden Testf\'e4lle f\'fcr Web-Anwendungen definiert, die direkt und ohne Interpretation oder anderweitige Umsetzung ausgef\'fchrt werden k\'f6nnen.\u8232 Der Vortrag stellt den oben angerissenen Gedankengang ausf\'fchrlich vor und gibt einen Einblick in das Tool Geb. Dabei wird veranschaulicht, wie man mit Geb \'96 auch ohne ein Programmierprofi zu sein \'96 menschenlesbare automatisierte Testf\'e4lle schreiben kann.\
\uc0\u8232 = \'dcbung Geb =\
In dieser \'dcbung lernen wir das Tool Geb kennen. Am Beispiel einer konkreten Web-Anwendung definieren wir Testf\'e4lle und setzen diese mit Geb um. Die Ausf\'fchrung der Testf\'e4lle binden wir dabei in einen Build-Prozess ein, so dass wir den gesamten Prozess von Testfalldefinition, -umsetzung, -ausf\'fchrung und Reporting abbilden. Au\'dferdem schauen wir uns das Reporting eines Testlaufes genauer an. F\'fcr klassische Tester ohne gr\'f6\'dfere Programmiererfahrung gibt es ein grundlegendes \'84Test-Framework\'93 (das im echten Projekt von Entwicklern gebaut w\'fcrde) als Basis, so dass \'84nur noch\'93 die Testf\'e4lle definiert werden m\'fcssen. Tester mit Entwickler-Background k\'f6nnen ggf. allen notwendigen Quellcode selbst entwickeln.\
\
Referent: Martin Pelzer\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
Martin Pelzer ist seit acht Jahren als Software-Entwickler und Software-Architekt in der Individualsoftware-Entwicklung t\'e4tig. In dieser Zeit war er vornehmlich in Java-Projekten und oftmals im Web-Umfeld unterwegs. Vor ca. vier Jahren kam er erstmals mit agilen Vorgehensmodellen in Ber\'fchrung und lernte die Vorteile agiler Software-Entwicklung sch\'e4tzen. Seine Interessensschwerpunkte sind neben der reinen Software-Entwicklung vor allem die Themen Build- und Release Management sowie agiles Testen. Seit Ende 2013 ist Martin Pelzer f\'fcr die iteratec GmbH in Stuttgart t\'e4tig.\
\
\
\
\pard\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
Martin Pelzer \
\'a0 \
iteratec GmbH \
mail@martinpelzer.de \
}
{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
Abstract zum Vortrag:\
\'a0\'a0\'a0================================================\
\'a0\'a0\'a0Infrastruktur f\'fcr Tests: Einfaches Setup, bessere Asserts\
\
\'a0\'a0\'a0In vielen Projekten ist das Know-how vorhanden, Tests mit JUnit oder\
\'a0\'a0\'a0\'e4hnlichen Frameworks zu erstellen. Doch es gelingt nicht immer,\
\'a0\'a0\'a0diese Tests kurz und pr\'e4gnant zu halten. Einerseits ist es oftmals\
\'a0\'a0\'a0schwierig eine der Laufzeit \'e4hnliche Objektstruktur zu erzeugen.\
\'a0\'a0\'a0Andererseits verschleiern die aus dieser Struktur abgeleiteten\
\'a0\'a0\'a0assert-Statements h\'e4ufig den eigentlichen Zweck der Tests. Dadurch\
\'a0\'a0\'a0sinkt die Motivation Unit-Tests zu schreiben deutlich und es wird\
\'a0\'a0\'a0wenn \'fcberhaupt nur noch in Integrationstests investiert.\
\
\'a0\'a0\'a0Auch bei einfacheren Objektmodellen gibt es Vorgehensweisen und\
\'a0\'a0\'a0Praktiken, um Tests in wenigen Zeilen Code noch lesbarer und\
\'a0\'a0\'a0\'fcbersichtlicher zu gestalten.\
\
\'a0\'a0\'a0Dieser Vortrag/Demo ist f\'fcr Teilnehmer geeignet, die Unit Tests\
\'a0\'a0\'a0kennen und auch bereits Tests schreiben. Wir demonstrieren\
\'a0\'a0\'a0Praktiken, mit deren Hilfe Tests kurz und sauber formuliert werden\
\'a0\'a0\'a0k\'f6nnen. Diese sind sowohl f\'fcr Neuentwicklungen, als auch bestehende\
\'a0\'a0\'a0System mit oben genannten Problemen anwendbar. Zu diesen \uc0\u147 Best\
\'a0\'a0\'a0Practices\uc0\u148  geh\'f6ren die Verwendung von Buildern und Matchern.\
\
\'a0\'a0\'a0Die Codebeispiele sind mit Java geschrieben, jedoch lassen sich die\
\'a0\'a0\'a0Vorgehensweisen auf andere Sprachen \'fcbertragen.\
\'a0\'a0\'a0================================================\
\
Abstract zur \'dcbung:\
\'a0\'a0\'a0================================================\
\'a0\'a0\'a0In dieser \'dcbung geht es darum, das im Vortrag vermittelte Wissen an\
\'a0\'a0\'a0Beispielen anzuwenden. Dabei werden Sie erfahren, wie es mit Hilfe\
\'a0\'a0\'a0von Buildern und Matchern m\'f6glich ist, einen Test \'fcbersichtlicher\
\'a0\'a0\'a0und sinnvoller zu gestalten.\
\
\'a0\'a0\'a0Zu Beginn werden die \'dcbungen, welche in Java in der Eclipse IDE\
\'a0\'a0\'a0geschrieben sind, kurz vorgestellt. Anschlie\'dfend k\'f6nnen die\
\'a0\'a0\'a0vorgestellten \'dcbungen idealerweise im Pair bearbeitet werden. Mit\
\'a0\'a0\'a0Unterst\'fctzung bei der Umsetzung der \'dcbungen k\'f6nnen Sie nat\'fcrlich\
\'a0\'a0\'a0rechnen. Unser Ziel ist es, mit Ihnen den n\'e4chsten Schritt in\
\'a0\'a0\'a0Richtung besser lesbarer Tests zu beschreiten.\
\
\
Referenten:\
Michael Haug, Franziska Sauerwein \
\
\pard\pardeftab720

\f1\b \cf0 \expnd0\expndtw0\kerning0
Franziska Sauerwein
\b0 \expnd0\expndtw0\kerning0
 \
Franziska Sauerwein ist Softwareentwicklerin bei der andrena objects ag. In der t\'e4glichen Projektarbeit bringt sie besonders gerne Methodiken aus XP und Scrum ein. In ihrer Freizeit besucht sie Treffen der Softwerkskammer sowie Konferenzen f\'fcr Software Craftsmenship. Weiterhin organisiert sie Coding Dojos, Tech Talks, Code Retreats und Hackathons.
\f0 \expnd0\expndtw0\kerning0
\
\

\f1\b \expnd0\expndtw0\kerning0
Michael Haug
\f0\b0 \expnd0\expndtw0\kerning0
\

\f1 \expnd0\expndtw0\kerning0
Michael Haug ist sei Januar 2013 f\'fcr die andrena objects ag in Softwareprojekten aktiv.
\f0 \expnd0\expndtw0\kerning0
\

\f1 \expnd0\expndtw0\kerning0
Tests, welche die gegebene Funktionalit\'e4t zwar abdecken, dabei aber unn\'f6tig komplex sind, stellen oft ein Hindernis bei \'c4nderungen oder Erweiterungen an einem Programm dar. Aus diesem Grund ist es f\'fcr ihn umso wichtiger saubere und wartbare Tests zu schreiben, die einfach und verst\'e4ndlich die Funktionalit\'e4t sicherstellen.\
}